/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : StateMap.sm
 */

package lab1at.recognizer.smc;


public class StateMapContext
    extends statemap.FSMContext
{
//---------------------------------------------------------------
// Member methods.
//

    public StateMapContext(AppClass owner)
    {
        this (owner, Map1.Start);
    }

    public StateMapContext(AppClass owner, AppClassState initState)
    {
        super (initState);

        _owner = owner;
    }

    @Override
    public void enterStartState()
    {
        getState().entry(this);
        return;
    }

    public void EOS()
    {
        _transition = "EOS";
        getState().EOS(this);
        _transition = "";
        return;
    }

    public void Move(String str)
    {
        _transition = "Move";
        getState().Move(this, str);
        _transition = "";
        return;
    }

    public AppClassState getState()
        throws statemap.StateUndefinedException
    {
        if (_state == null)
        {
            throw(
                new statemap.StateUndefinedException());
        }

        return ((AppClassState) _state);
    }

    protected AppClass getOwner()
    {
        return (_owner);
    }

    public void setOwner(AppClass owner)
    {
        if (owner == null)
        {
            throw (
                new NullPointerException(
                    "null owner"));
        }
        else
        {
            _owner = owner;
        }

        return;
    }

//---------------------------------------------------------------
// Member data.
//

    transient private AppClass _owner;

    //-----------------------------------------------------------
    // Constants.
    //

    private static final long serialVersionUID = 1L;

//---------------------------------------------------------------
// Inner classes.
//

    public static abstract class AppClassState
        extends statemap.State
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected AppClassState(String name, int id)
        {
            super (name, id);
        }

        protected void entry(StateMapContext context) {}
        protected void exit(StateMapContext context) {}

        protected void EOS(StateMapContext context)
        {
            Default(context);
        }

        protected void Move(StateMapContext context, String str)
        {
            Default(context);
        }

        protected void Default(StateMapContext context)
        {
            throw (
                new statemap.TransitionUndefinedException(
                    "State: " +
                    context.getState().getName() +
                    ", Transition: " +
                    context.getTransition()));
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
    // Constants.
    //

        private static final long serialVersionUID = 1L;
    }

    /* package */ static abstract class Map1
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //

        public static final Map1_Start Start =
            new Map1_Start("Map1.Start", 0);
        public static final Map1_FuncNameState FuncNameState =
            new Map1_FuncNameState("Map1.FuncNameState", 1);
        public static final Map1_OpenParamsListState OpenParamsListState =
            new Map1_OpenParamsListState("Map1.OpenParamsListState", 2);
        public static final Map1_ParamTypeState ParamTypeState =
            new Map1_ParamTypeState("Map1.ParamTypeState", 3);
        public static final Map1_ParamNameState ParamNameState =
            new Map1_ParamNameState("Map1.ParamNameState", 4);
        public static final Map1_NextParamState NextParamState =
            new Map1_NextParamState("Map1.NextParamState", 5);
        public static final Map1_SemicolonState SemicolonState =
            new Map1_SemicolonState("Map1.SemicolonState", 6);
        public static final Map1_OK OK =
            new Map1_OK("Map1.OK", 7);
        public static final Map1_Error Error =
            new Map1_Error("Map1.Error", 8);
    }

    protected static class Map1_Default
        extends AppClassState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected Map1_Default(String name, int id)
        {
            super (name, id);
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class Map1_Start
        extends Map1_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private Map1_Start(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Move(StateMapContext context, String str)
        {
            AppClass ctxt = context.getOwner();

            if (ctxt.isType(str))
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.noMoreParamsNeeded();
                }
                finally
                {
                    context.setState(Map1.FuncNameState);
                    (context.getState()).entry(context);
                }

            }
            else if (ctxt.isString(str))
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(Map1.Error);
                (context.getState()).entry(context);
            }            else
            {
                super.Move(context, str);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class Map1_FuncNameState
        extends Map1_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private Map1_FuncNameState(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Move(StateMapContext context, String str)
        {
            AppClass ctxt = context.getOwner();

            if (ctxt.isName(str))
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.setFuncName(str);
                }
                finally
                {
                    context.setState(Map1.OpenParamsListState);
                    (context.getState()).entry(context);
                }

            }
            else if (ctxt.isString(str))
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(Map1.Error);
                (context.getState()).entry(context);
            }            else
            {
                super.Move(context, str);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class Map1_OpenParamsListState
        extends Map1_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private Map1_OpenParamsListState(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Move(StateMapContext context, String str)
        {
            AppClass ctxt = context.getOwner();

            if ("(".equals(str))
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(Map1.ParamTypeState);
                (context.getState()).entry(context);
            }
            else if (ctxt.isString(str))
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(Map1.Error);
                (context.getState()).entry(context);
            }            else
            {
                super.Move(context, str);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class Map1_ParamTypeState
        extends Map1_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private Map1_ParamTypeState(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Move(StateMapContext context, String str)
        {
            AppClass ctxt = context.getOwner();

            if (ctxt.isType(str))
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(Map1.ParamNameState);
                (context.getState()).entry(context);
            }
            else if ("(".equals(str) && ctxt.getMoreParamsNeed())
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(Map1.Error);
                (context.getState()).entry(context);
            }
            else if (")".equals(str) && !ctxt.getMoreParamsNeed())
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(Map1.SemicolonState);
                (context.getState()).entry(context);
            }
            else if (ctxt.isString(str))
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(Map1.Error);
                (context.getState()).entry(context);
            }            else
            {
                super.Move(context, str);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class Map1_ParamNameState
        extends Map1_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private Map1_ParamNameState(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Move(StateMapContext context, String str)
        {
            AppClass ctxt = context.getOwner();

            if (ctxt.isName(str))
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(Map1.NextParamState);
                (context.getState()).entry(context);
            }
            else if (ctxt.isString(str))
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(Map1.Error);
                (context.getState()).entry(context);
            }            else
            {
                super.Move(context, str);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class Map1_NextParamState
        extends Map1_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private Map1_NextParamState(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Move(StateMapContext context, String str)
        {
            AppClass ctxt = context.getOwner();

            if (")".equals(str))
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(Map1.SemicolonState);
                (context.getState()).entry(context);
            }
            else if (",".equals(str))
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.moreParamsNeeded();
                }
                finally
                {
                    context.setState(Map1.ParamTypeState);
                    (context.getState()).entry(context);
                }

            }
            else if (ctxt.isString(str))
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(Map1.Error);
                (context.getState()).entry(context);
            }            else
            {
                super.Move(context, str);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class Map1_SemicolonState
        extends Map1_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private Map1_SemicolonState(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Move(StateMapContext context, String str)
        {
            AppClass ctxt = context.getOwner();

            if (";".equals(str))
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(Map1.OK);
                (context.getState()).entry(context);
            }
            else if (ctxt.isString(str))
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(Map1.Error);
                (context.getState()).entry(context);
            }            else
            {
                super.Move(context, str);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class Map1_OK
        extends Map1_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private Map1_OK(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void EOS(StateMapContext context)
        {
            AppClass ctxt = context.getOwner();

            AppClassState endState = context.getState();
            context.clearState();
            try
            {
                ctxt.acceptable();
            }
            finally
            {
                context.setState(endState);
            }

            return;
        }

        @Override
        protected void Move(StateMapContext context, String str)
        {
            AppClass ctxt = context.getOwner();

            if (ctxt.isString(str))
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(Map1.OK);
                (context.getState()).entry(context);
            }
            else
            {
                super.Move(context, str);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class Map1_Error
        extends Map1_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private Map1_Error(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void EOS(StateMapContext context)
        {
            AppClass ctxt = context.getOwner();

            AppClassState endState = context.getState();
            context.clearState();
            try
            {
                ctxt.unacceptable();
            }
            finally
            {
                context.setState(endState);
            }

            return;
        }

        @Override
        protected void Move(StateMapContext context, String str)
        {
            AppClass ctxt = context.getOwner();

            if (ctxt.isString(str))
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(Map1.Error);
                (context.getState()).entry(context);
            }
            else
            {
                super.Move(context, str);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
